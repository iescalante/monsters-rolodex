{"version":3,"sources":["components/Card/index.js","components/CardList/index.js","components/SearchBox/index.js","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","SearchBox","type","placeholder","value","searchField","onChange","handleChange","App","useState","setMonsters","setSearchField","useEffect","fetch","then","res","json","console","log","filteredMonsters","filter","toLowerCase","includes","e","target","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8SAeeA,EAbF,SAACC,GACZ,OACE,sBAAKC,UAAU,iBAAf,UACE,qBACEC,IAAI,UACJC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BAEL,6BAAKL,EAAMI,QAAQE,OACnB,4BAAIN,EAAMI,QAAQG,YCGTC,EAVE,SAACR,GAChB,OACE,qBAAKC,UAAU,YAAf,SACGD,EAAMS,SAASC,KAAI,SAACN,GACnB,OAAO,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,UCOnBM,G,MAZG,SAACX,GACjB,OACE,uBACEC,UAAU,SACVW,KAAK,SACLC,YAAY,kBACZC,MAAOd,EAAMe,YACbC,SAAUhB,EAAMiB,iBC8BPC,MAlCf,WAAgB,IAAD,EACmBC,mBAAS,IAD5B,mBACNV,EADM,KACIW,EADJ,OAEyBD,mBAAS,IAFlC,mBAENJ,EAFM,KAEOM,EAFP,KAabC,qBAAU,WARRC,MAAM,8CACHC,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACE,GACLC,QAAQC,IAAIF,GACZN,EAAYM,QAMf,IAEH,IAIMG,EAAmBpB,EAASqB,QAAO,SAAC1B,GACxC,OAAOA,EAAQE,KAAKyB,cAAcC,SAASjB,EAAYgB,kBAGzD,OACE,sBAAK9B,UAAU,MAAf,UACE,oDACA,cAAC,EAAD,CAAWc,YAAaA,EAAaE,aAXpB,SAACgB,GACpBZ,EAAeY,EAAEC,OAAOpB,UAWtB,cAAC,EAAD,CAAUL,SAAUoB,QCtBXM,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBb,MAAK,YAAkD,IAA/Cc,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.4176effa.chunk.js","sourcesContent":["import \"./Card.css\";\r\n\r\nconst Card = (props) => {\r\n  return (\r\n    <div className=\"card-container\">\r\n      <img\r\n        alt=\"monster\"\r\n        src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`}\r\n      />\r\n      <h2>{props.monster.name}</h2>\r\n      <p>{props.monster.email}</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import \"./CardList.css\";\r\nimport Card from \"../Card/index\";\r\n\r\nconst CardList = (props) => {\r\n  return (\r\n    <div className=\"card-list\">\r\n      {props.monsters.map((monster) => {\r\n        return <Card key={monster.id} monster={monster} />;\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CardList;\r\n","import \"./SearchBox.css\";\r\n\r\nconst SearchBox = (props) => {\r\n  return (\r\n    <input\r\n      className=\"search\"\r\n      type=\"search\"\r\n      placeholder=\"search monsters\"\r\n      value={props.searchField}\r\n      onChange={props.handleChange}\r\n    />\r\n  );\r\n};\r\n\r\nexport default SearchBox;\r\n","import { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport CardList from \"./components/CardList/index\";\nimport SearchBox from \"./components/SearchBox/index\";\n\nfunction App() {\n  const [monsters, setMonsters] = useState([]);\n  const [searchField, setSearchField] = useState(\"\");\n\n  const getMonsters = () => {\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n      .then((res) => res.json())\n      .then((json) => {\n        console.log(json);\n        setMonsters(json);\n      });\n  };\n\n  useEffect(() => {\n    getMonsters();\n  }, []);\n\n  const handleChange = (e) => {\n    setSearchField(e.target.value);\n  };\n\n  const filteredMonsters = monsters.filter((monster) => {\n    return monster.name.toLowerCase().includes(searchField.toLowerCase());\n  });\n\n  return (\n    <div className=\"App\">\n      <h1> Monsters Rolodex </h1>\n      <SearchBox searchField={searchField} handleChange={handleChange} />\n      <CardList monsters={filteredMonsters} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}